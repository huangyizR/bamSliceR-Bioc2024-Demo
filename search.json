[{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Sean Davis Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"vignette, walk bamSliceR toolset swiftly extract coordinate- range-based aligned DNA /RNA sequence reads Genomic Data Commons GDC. demonstrate downstream functionality tally annotate variants BAM files, whether stored cloud locally. Also, want highlight new utilities implemented bamSliceR facilitate transcript-aware variants annotation using transcriptome BAM generated aligning reads RNA-seq reference transcripts sequences (GENCODE v36). use data TARGET (Bolouri et al., 2017), BEAT-AML (Tyner et al., 2018) Leucegene (Lavallée et al., 2016).","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"developed bamSliceR address two practical challenges: resource-sparing identification candidate subjects, variant detection aligned sequence reads across thousands controlled-access subjects. GDC (Wilson et al., 2017) BAM Slicing API practical well-documented REST API purpose. (Morgan Davis, 2017). Additionally, GenomicDataCommons Bioconductor package implements service R interface, allowing efficient querying data GDC. However, find relatively little published work uses GDC API, even evaluating specific candidate variants. Instead, researchers often rely variant calls previous studies, assuming single best method variant detection fits experimental designs—notion contradicted various benchmarks. Alternatively, retrieving reanalyze raw sequence data, highly inefficient.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"bamslicer-pipeline","dir":"Articles","previous_headings":"","what":"bamSliceR pipeline","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"## analyzing data controlled access, need download GDC token store file home directory. instructions see GenomicDataCommons Token Data portal authentication tokens","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set-up","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"","code":"library(bamSliceR) library(rtracklayer) library(parallel) library(ggplot2)"},{"path":[]},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"download-bam-slices","dir":"Articles","previous_headings":"Working with Genomic BAM files","what":"Download Bam Slices","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"data model GDC complex. want query types data, may worth overview details. , focus identifying metadata BAM files, followed downloading sliced BAM.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"identify-the-bam-file-of-interest","dir":"Articles","previous_headings":"Working with Genomic BAM files > Download Bam Slices","what":"Identify the BAM file of interest","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"simplified querying process single function gather BAM files information project interest. Three pieces information needed locate BAM files GDC portal, can inspected availableProjectId(), availableExpStrategy() availableWorkFlow(), respectively. project ID. Experiment Strategy (ex. “RAN-Seq”, “WGS”, etc. ) Alignment workflow.","code":"file_meta = getGDCBAMs(projectId = \"TARGET-AML\",                         es = \"RNA-Seq\",                         workflow = \"STAR 2-Pass Genome\") nrow(file_meta) ## [1] 3225 head(file_meta) ##                                     id                   sample ## 1 7d4d460b-5ac9-4a6f-83f8-b25f22c5dcad TARGET-20-PASNKC-09A-01R ## 2 33194131-ddc9-417a-ab6d-22c01acc6c7d TARGET-20-PASNLR-03A-01R ## 3 c2e1548b-e75f-435a-9228-a3cbf9dfd051 TARGET-20-PASNAL-09A-01R ## 4 e68b2f1b-fcc4-4a28-8505-bc88e15551a5 TARGET-20-PASNDA-09A-01R ## 5 4d636562-b5fd-4bdf-b3eb-067210786f34 TARGET-20-PATLIG-09A-02R ## 6 794532f5-c57e-4fec-a9dd-fb3e3a5e936d TARGET-20-PASNYB-09A-01R ##                                                            file_name          case_id ## 1 4437f783-96e7-43a8-87ef-5fed5b4c91ab.rna_seq.genomic.gdc_realn.bam TARGET-20-PASNKC ## 2 84bba567-4acc-4ee6-8f19-e15b7a87ed08.rna_seq.genomic.gdc_realn.bam TARGET-20-PASNLR ## 3 039a1e3a-b7b6-4bc8-8c52-1c7f82cbaa62.rna_seq.genomic.gdc_realn.bam TARGET-20-PASNAL ## 4 5887ccad-c7a4-454a-9c50-d223bb144c78.rna_seq.genomic.gdc_realn.bam TARGET-20-PASNDA ## 5 e8bbcbd2-1cc1-41be-89b7-032264703bf6.rna_seq.genomic.gdc_realn.bam TARGET-20-PATLIG ## 6 e0a2b8e3-f8fb-480c-96e6-bfca08f09934.rna_seq.genomic.gdc_realn.bam TARGET-20-PASNYB ##                                       sample_type experimental_strategy ## 1      Primary Blood Derived Cancer - Bone Marrow               RNA-Seq ## 2 Primary Blood Derived Cancer - Peripheral Blood               RNA-Seq ## 3      Primary Blood Derived Cancer - Bone Marrow               RNA-Seq ## 4      Primary Blood Derived Cancer - Bone Marrow               RNA-Seq ## 5      Primary Blood Derived Cancer - Bone Marrow               RNA-Seq ## 6      Primary Blood Derived Cancer - Bone Marrow               RNA-Seq ##             workflow ## 1 STAR 2-Pass Genome ## 2 STAR 2-Pass Genome ## 3 STAR 2-Pass Genome ## 4 STAR 2-Pass Genome ## 5 STAR 2-Pass Genome ## 6 STAR 2-Pass Genome ##                                                                                           downloaded_file_name ## 1 TARGET-20-PASNKC-09A-01R_TARGET-20-PASNKC_4437f783-96e7-43a8-87ef-5fed5b4c91ab.rna_seq.genomic.gdc_realn.bam ## 2 TARGET-20-PASNLR-03A-01R_TARGET-20-PASNLR_84bba567-4acc-4ee6-8f19-e15b7a87ed08.rna_seq.genomic.gdc_realn.bam ## 3 TARGET-20-PASNAL-09A-01R_TARGET-20-PASNAL_039a1e3a-b7b6-4bc8-8c52-1c7f82cbaa62.rna_seq.genomic.gdc_realn.bam ## 4 TARGET-20-PASNDA-09A-01R_TARGET-20-PASNDA_5887ccad-c7a4-454a-9c50-d223bb144c78.rna_seq.genomic.gdc_realn.bam ## 5 TARGET-20-PATLIG-09A-02R_TARGET-20-PATLIG_e8bbcbd2-1cc1-41be-89b7-032264703bf6.rna_seq.genomic.gdc_realn.bam ## 6 TARGET-20-PASNYB-09A-01R_TARGET-20-PASNYB_e0a2b8e3-f8fb-480c-96e6-bfca08f09934.rna_seq.genomic.gdc_realn.bam ##   UPC_ID ## 1 PASNKC ## 2 PASNLR ## 3 PASNAL ## 4 PASNDA ## 5 PATLIG ## 6 PASNYB availableProjectId() %>% head(n = 10) ##  [1] \"HCMI-CMDC\"                 \"TCGA-BRCA\"                 \"TARGET-ALL-P3\"             ##  [4] \"EXCEPTIONAL_RESPONDERS-ER\" \"CGCI-HTMCP-LC\"             \"CPTAC-2\"                   ##  [7] \"CMI-MBC\"                   \"TARGET-ALL-P2\"             \"OHSU-CNL\"                  ## [10] \"TARGET-ALL-P1\" availableExpStrategy(\"TARGET-AML\") ## [1] \"Genotyping Array\"    \"Methylation Array\"   \"RNA-Seq\"             ## [4] \"Targeted Sequencing\" \"WGS\"                 \"WXS\"                 ## [7] \"miRNA-Seq\" availableWorkFlow(projectId = \"TARGET-AML\", es = \"RNA-Seq\") ##   doc_count                       key ## 1      6450                    Arriba ## 2      6450             STAR - Counts ## 3      6450               STAR-Fusion ## 4      3225      STAR 2-Pass Chimeric ## 5      3225        STAR 2-Pass Genome ## 6      3225 STAR 2-Pass Transcriptome"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"identify-the-genomic-ranges-of-interest","dir":"Articles","previous_headings":"Working with Genomic BAM files > Download Bam Slices","what":"Identify the Genomic Ranges of interest","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"BAM slicing API GDC portal accept genomic ranges specifying vector character() e.g., c(“chr”, “chr1:10000”). provide function get required input format given gene names. Get either GRanges vector character() exons genes.","code":"target_genes_data = system.file(\"extdata\", \"gene_names.rds\", package = \"bamSliceR\") target_genes = readRDS(target_genes_data) target_genes ##     IDH1     IDH2     TET1     TET2    ASXL1    ASXL2   DNMT3A    RUNX1 HIST1H3A HIST1H3B  ##   \"IDH1\"   \"IDH2\"   \"TET1\"   \"TET2\"  \"ASXL1\"  \"ASXL2\" \"DNMT3A\"  \"RUNX1\"   \"H3C1\"   \"H3C2\"  ## HIST1H3C HIST1H3D HIST1H3E HIST1H3F HIST1H3G HIST1H3H HIST1H3I HIST1H3J    H3F3A  ##   \"H3C3\"   \"H3C4\"   \"H3C6\"   \"H3C7\"   \"H3C8\"  \"H3C10\"  \"H3C11\"  \"H3C12\"  \"H3-3A\" #Get GRanges for exons of all genes above target_ranges_gr = getGenesCoordinates(target_genes, ret = \"GRanges\") head(target_ranges_gr) ## GRanges object with 6 ranges and 0 metadata columns: ##          seqnames              ranges strand ##             <Rle>           <IRanges>  <Rle> ##    ASXL1       20   32358280-32439369      + ##    ASXL2        2   25733703-25878537      - ##   DNMT3A        2   25227805-25342640      - ##    H3-3A        1 226061801-226072069      + ##     H3C1        6   26020401-26021008      + ##    H3C10        6   27810001-27811350      + ##   ------- ##   seqinfo: 8 sequences from an unspecified genome; no seqlengths #Get the vector of character() instead. target_ranges_chars = getGenesCoordinates(target_genes, ret =\"DF\",                                            extendEnds = 100) head(target_ranges_chars) ## [1] \"chr20:32358230-32439419\"  \"chr2:25733653-25878587\"   \"chr2:25227755-25342690\"   ## [4] \"chr1:226061751-226072119\" \"chr6:26020351-26021058\"   \"chr6:27809951-27811400\""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"download-sliced-bam","dir":"Articles","previous_headings":"Working with Genomic BAM files > Download Bam Slices","what":"Download sliced-BAM","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"","code":"downloadSlicedBAMs(file_df = file_meta,                     regions = target_ranges_chars,                     dir = \"BAM_FILES\")"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"tally-variants-from-sliced-bams","dir":"Articles","previous_headings":"Working with Genomic BAM files","what":"Tally Variants from sliced BAMs","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"bamSliceR integrated functionality Bioconductor package gmapR (gmapR) tally coverage counts variant alleles followed estimation Variant Allele Fraction (VAF) variants.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"identify-the-genomic-ranges-of-interest-1","dir":"Articles","previous_headings":"Working with Genomic BAM files > Tally Variants from sliced BAMs","what":"Identify the Genomic Ranges of interest","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"first also need specify regions GRanges object, can subset genomic ranges used sliced BAM files.","code":"head(target_ranges_gr) ## GRanges object with 6 ranges and 0 metadata columns: ##          seqnames              ranges strand ##             <Rle>           <IRanges>  <Rle> ##    ASXL1       20   32358280-32439369      + ##    ASXL2        2   25733703-25878537      - ##   DNMT3A        2   25227805-25342640      - ##    H3-3A        1 226061801-226072069      + ##     H3C1        6   26020401-26021008      + ##    H3C10        6   27810001-27811350      + ##   ------- ##   seqinfo: 8 sequences from an unspecified genome; no seqlengths"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"specify-list-of-bam-files","dir":"Articles","previous_headings":"Working with Genomic BAM files > Tally Variants from sliced BAMs","what":"Specify list of BAM files","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"need make text file include names downloaded BAM files. terminal command directory downloaded BAM files, scan ‘bamfiles’ R.","code":"cd DIR_BAM_FILES ls | grep bam$ > bamfiles bamfiles_txt = system.file(\"extdata\", \"bamfiles\", package = \"bamSliceR\") bamfiles = scan(bamfiles_txt, \"character\")"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"preparing-gmapgenome-object","dir":"Articles","previous_headings":"Working with Genomic BAM files > Tally Variants from sliced BAMs","what":"Preparing gmapGenome Object","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Last thing need create gmapGenome object, specify directory .","code":"#GmapGenome objects can be created from FASTA files or BSgenome objects. Below is  #an example of how to create human hg38 gmapGenome from BSgenome.  library(gmapR) library(BSgenome.Hsapiens.UCSC.hg38)  gmapGenomePath <- file.path(\"PATH/to/SAVE/gmapGenome\", \"hg38\") gmapGenomeDirectory <- GmapGenomeDirectory(gmapGenomePath, create = TRUE)  gmapGenome <- GmapGenome(genome=Hsapiens,                           directory=gmapGenomeDirectory,                          name=\"hg38\", create=TRUE)"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"tallying-reads","dir":"Articles","previous_headings":"Working with Genomic BAM files > Tally Variants from sliced BAMs","what":"Tallying Reads","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"can start tally reads BAM files. want run tallyReads machine multiple nodes, parameters distribute nodes according number BAM files number genomic ranges: parallelOnRanges: TRUE, process Genomic Ranges parallel. parallelOnRangesBPPARAM: configuration parallel tallyreads genomic ranges. BPPARAM: configuration parallel tallyreads BAM files. want tally reads thousands BAM gene regions, ideally want put workers computing BAM files less workers granges regions. also provide bash template run tallyReads() HPC large cohorts.","code":"tallied_reads = tallyReads(bamfiles = bamfiles, gmapGenome_dir = gmapGenome_dir,                             grs = target_ranges,                            BPPARAM = MulticoreParam(workers = 4 , stop.on.error = TRUE),                            parallelOnRanges = TRUE,                            parallelOnRangesBPPARAM = MulticoreParam(workers = 4) )"},{"path":[]},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"annotation-of-variants","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Annotation of Variants","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"VRanges object generated tallying reads BAM files, contains putative variants. sampleNames() can used see name BAM files variants detected . , present example annotate variants predicted consequence using VariantAnnotation Ensembl Variant Effect Predictor (VEP). started VRanges output tallyReads().","code":"library(bamSliceR) tallied_reads = system.file(\"extdata\", \"tallied_reads_example.rds\",                              package = \"bamSliceR\") tallied_reads_vr = readRDS(tallied_reads) tallied_reads_vr[4565:4566] ## VRanges object with 2 ranges and 17 metadata columns: ##       seqnames    ranges strand         ref              alt     totalDepth ##          <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1]     chr1 226066383      *           A                G            139 ##   [2]     chr1 226066384      *           T                C             96 ##             refDepth       altDepth            sampleNames softFilterMatrix | n.read.pos ##       <integerOrRle> <integerOrRle>          <factorOrRle>         <matrix> |  <integer> ##   [1]            138              1 TARGET-20-PAVLZE-09A..                  |          1 ##   [2]             95              1 TARGET-20-PAVHCV-09A..                  |          1 ##       n.read.pos.ref raw.count.total count.plus count.plus.ref count.minus ##            <integer>       <integer>  <integer>      <integer>   <integer> ##   [1]             60             139          1             90           0 ##   [2]             49              96          1             65           0 ##       count.minus.ref count.del.plus count.del.minus read.pos.mean read.pos.mean.ref ##             <integer>      <integer>       <integer>     <numeric>         <numeric> ##   [1]              48              0               0            67           33.0652 ##   [2]              30              0               0            35           31.8316 ##       read.pos.var read.pos.var.ref     mdfne mdfne.ref count.high.nm count.high.nm.ref ##          <numeric>        <numeric> <numeric> <numeric>     <integer>         <integer> ##   [1]           NA          420.538        NA        NA             1               138 ##   [2]           NA          479.346        NA        NA             1                95 ##   ------- ##   seqinfo: 2779 sequences (1 circular) from 2 genomes (hg38, NA) ##   hardFilters: NULL # VRanges-specific methods such as altDepth(), refDepth(), totalDepth() would not # availiable after conversion to GRanges. So save those info now. tallied_reads_vr = saveVRinfo(tallied_reads_vr) tallied_reads_vr[4565:4566] ## VRanges object with 2 ranges and 23 metadata columns: ##       seqnames    ranges strand         ref              alt     totalDepth ##          <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1]     chr1 226066383      *           A                G            139 ##   [2]     chr1 226066384      *           T                C             96 ##             refDepth       altDepth            sampleNames softFilterMatrix | n.read.pos ##       <integerOrRle> <integerOrRle>          <factorOrRle>         <matrix> |  <integer> ##   [1]            138              1 TARGET-20-PAVLZE-09A..                  |          1 ##   [2]             95              1 TARGET-20-PAVHCV-09A..                  |          1 ##       n.read.pos.ref raw.count.total count.plus count.plus.ref count.minus ##            <integer>       <integer>  <integer>      <integer>   <integer> ##   [1]             60             139          1             90           0 ##   [2]             49              96          1             65           0 ##       count.minus.ref count.del.plus count.del.minus read.pos.mean read.pos.mean.ref ##             <integer>      <integer>       <integer>     <numeric>         <numeric> ##   [1]              48              0               0            67           33.0652 ##   [2]              30              0               0            35           31.8316 ##       read.pos.var read.pos.var.ref     mdfne mdfne.ref count.high.nm count.high.nm.ref ##          <numeric>        <numeric> <numeric> <numeric>     <integer>         <integer> ##   [1]           NA          420.538        NA        NA             1               138 ##   [2]           NA          479.346        NA        NA             1                95 ##               ref         alt totalDepth  refDepth  altDepth        VAF ##       <character> <character>  <integer> <integer> <integer>  <numeric> ##   [1]           A           G        139       138         1 0.00719424 ##   [2]           T           C         96        95         1 0.01041667 ##   ------- ##   seqinfo: 2779 sequences (1 circular) from 2 genomes (hg38, NA) ##   hardFilters: NULL # Match back the metadata of BAM files to the VRanges #file_meta = getGDCBAMs(\"TARGET-AML\", \"RNA-Seq\", \"STAR 2-Pass Genome\") tallied_reads_vrinfo_baminfo = annotateWithBAMinfo(tallied_reads_vr, file_meta) tallied_reads_vrinfo_baminfo[4565:4566] ## VRanges object with 2 ranges and 32 metadata columns: ##       seqnames    ranges strand         ref              alt     totalDepth ##          <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1]     chr1 226066383      *           A                G            139 ##   [2]     chr1 226066384      *           T                C             96 ##             refDepth       altDepth            sampleNames softFilterMatrix | n.read.pos ##       <integerOrRle> <integerOrRle>          <factorOrRle>         <matrix> |  <integer> ##   [1]            138              1 TARGET-20-PAVLZE-09A..                  |          1 ##   [2]             95              1 TARGET-20-PAVHCV-09A..                  |          1 ##       n.read.pos.ref raw.count.total count.plus count.plus.ref count.minus ##            <integer>       <integer>  <integer>      <integer>   <integer> ##   [1]             60             139          1             90           0 ##   [2]             49              96          1             65           0 ##       count.minus.ref count.del.plus count.del.minus read.pos.mean read.pos.mean.ref ##             <integer>      <integer>       <integer>     <numeric>         <numeric> ##   [1]              48              0               0            67           33.0652 ##   [2]              30              0               0            35           31.8316 ##       read.pos.var read.pos.var.ref     mdfne mdfne.ref count.high.nm count.high.nm.ref ##          <numeric>        <numeric> <numeric> <numeric>     <integer>         <integer> ##   [1]           NA          420.538        NA        NA             1               138 ##   [2]           NA          479.346        NA        NA             1                95 ##               ref         alt totalDepth  refDepth  altDepth        VAF ##       <character> <character>  <integer> <integer> <integer>  <numeric> ##   [1]           A           G        139       138         1 0.00719424 ##   [2]           T           C         96        95         1 0.01041667 ##                           id                 sample              file_name ##                  <character>            <character>            <character> ##   [1] 6cb02b4d-ca87-4d9d-a.. TARGET-20-PAVLZE-09A.. 09b91534-5759-4000-9.. ##   [2] f74f1d3f-8774-4bd2-b.. TARGET-20-PAVHCV-09A.. 6b5b7906-4220-4f7d-b.. ##                case_id            sample_type experimental_strategy           workflow ##            <character>            <character>           <character>        <character> ##   [1] TARGET-20-PAVLZE Primary Blood Derive..               RNA-Seq STAR 2-Pass Genome ##   [2] TARGET-20-PAVHCV Primary Blood Derive..               RNA-Seq STAR 2-Pass Genome ##         downloaded_file_name      UPC_ID ##                  <character> <character> ##   [1] TARGET-20-PAVLZE-09A..      PAVLZE ##   [2] TARGET-20-PAVHCV-09A..      PAVHCV ##   ------- ##   seqinfo: 2779 sequences (1 circular) from 2 genomes (hg38, NA) ##   hardFilters: NULL # Only keep variants with variant allele frequency greater than 5%. tallied_reads_vrinfo_baminfo = subset(tallied_reads_vrinfo_baminfo, VAF > 0.05)"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"variantannotation","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"VariantAnnotation","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Consequence variants now can predicted using VariantAnnotation:","code":"getVariantAnnotation(tallied_reads_vrinfo_baminfo) -> tallied_reads_vrinfo_baminfo_gr tallied_reads_vrinfo_baminfo_gr[,c(\"UPC_ID\", bamSliceR:::.VARIANT_ANNOTATE_INFO)] ## GRanges object with 55017 ranges and 15 metadata columns: ##           seqnames            ranges strand |      UPC_ID      varAllele    CDSLOC ##              <Rle>         <IRanges>  <Rle> | <character> <DNAStringSet> <IRanges> ##       [1]     chr1         143905605      - |      PAVCJW              G       189 ##       [2]     chr1         143905605      - |      PAVCJW              G       362 ##       [3]     chr1         143905634      - |      PAVHLI              A       160 ##       [4]     chr1         143905634      - |      PAVHLI              A       333 ##       [5]     chr1         143905660      - |      PAVDAB              A       134 ##       ...      ...               ...    ... .         ...            ...       ... ##   [55013]    chr21          34892962      - |      PATLFJ             AA        60 ##   [55014]    chr21          35048867      - |      PASHWN             TT        33 ##   [55015]    chr21          35048867      - |      PASHWN             TT        33 ##   [55016]    chr21 35048881-35048882      - |      PAURVI              T     18-19 ##   [55017]    chr21 35048881-35048882      - |      PAURVI              T     18-19 ##              PROTEINLOC   QUERYID        TXID         CDSID      GENEID   CONSEQUENCE ##           <IntegerList> <integer> <character> <IntegerList> <character>      <factor> ##       [1]            63        71       17544   21002,21003      440686 nonsynonymous ##       [2]           121        71       17545   21002,21003      440686 nonsynonymous ##       [3]            54        72       17544   21002,21003      440686 nonsynonymous ##       [4]           111        72       17545   21002,21003      440686 nonsense      ##       [5]            45        73       17544   21002,21003      440686 nonsynonymous ##       ...           ...       ...         ...           ...         ...           ... ##   [55013]            20     43534      237682        261221   101928269    frameshift ##   [55014]            11     43535      237671        261222         861    frameshift ##   [55015]            11     43535      237682        261222   101928269    frameshift ##   [55016]           6,7     43536      237671        261222         861    frameshift ##   [55017]           6,7     43536      237682        261222   101928269    frameshift ##                 REFCODON       VARCODON         REFAA         VARAA       POS      CHANGE ##           <DNAStringSet> <DNAStringSet> <AAStringSet> <AAStringSet> <integer> <character> ##       [1]            CAT            CAG             H             Q        63        H63Q ##       [2]            ATG            AGG             M             R       121       M121R ##       [3]            CGC            AGC             R             S        54        R54S ##       [4]            TGC            TGA             C             *       111       C111* ##       [5]            GGG            GAG             G             E        45        G45E ##       ...            ...            ...           ...           ...       ...         ... ##   [55013]            GAA           GAAA                                    20          20 ##   [55014]            CCT           CCTT                                    11          11 ##   [55015]            CCT           CCTT                                    11          11 ##   [55016]         ATATTT          ATTTT                                     6           6 ##   [55017]         ATATTT          ATTTT                                     6           6 ##   ------- ##   seqinfo: 24 sequences from hg38 genome"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"ensembl-variant-effect-predictor-vep","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Ensembl Variant Effect Predictor (VEP)","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Consequence variants also can predicted using Variant Effect Predictor (VEP). code shows generate VCF file input VEP: Details run Variant Effect Predictor can found (ensemblVEP) (VEP). VCF file variant effect predicted can annotated back patients’ variants.","code":"gr2vrforVEP(tallied_reads_vrinfo_baminfo, file = \"~/INPUT_VCF_FILE.vcf\",              writeToVcf = TRUE) -> vr  head(vr) ## VRanges object with 6 ranges and 1 metadata column: ##       seqnames    ranges strand         ref              alt     totalDepth ##          <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1]     chr1 143894587      *           C                A              2 ##   [2]     chr1 143894592      *           A                G              2 ##   [3]     chr1 143894604      *           G                T              1 ##   [4]     chr1 143894701      *           A                C              8 ##   [5]     chr1 143894711      *           G                A              1 ##   [6]     chr1 143894815      *           A                T              2 ##             refDepth       altDepth   sampleNames softFilterMatrix |              index ##       <integerOrRle> <integerOrRle> <factorOrRle>         <matrix> |        <character> ##   [1]              1              1           VEP                  | chr1:143894587_C/A ##   [2]              1              1           VEP                  | chr1:143894592_A/G ##   [3]              0              1           VEP                  | chr1:143894604_G/T ##   [4]              7              1           VEP                  | chr1:143894701_A/C ##   [5]              0              1           VEP                  | chr1:143894711_G/A ##   [6]              1              1           VEP                  | chr1:143894815_A/T ##   ------- ##   seqinfo: 2779 sequences from an unspecified genome; no seqlengths ##   hardFilters: NULL #Example vcf file with variant effect predicted. # Output VCF file from VEP vep_file = system.file(\"extdata\", \"TARGET_AML_VRforVEP_vep.vcf\", package = \"bamSliceR\")  #Extract the predicted consequences of variants from VEP csqFromVEP = getCSQfromVEP(vep_file) head(csqFromVEP)  #Annotated the variants with VEP predicted consequences tallied_reads_vrinfo_baminfo_annotated_gr = getVEPAnnotation(tallied_reads_vrinfo_baminfo_gr,                                                               csqFromVEP) tallied_reads_vrinfo_baminfo_annotated_gr[1523:1525,-c(1:17)]"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"missing-reference-read-counts-for-indels-in-tallyreads","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Missing Reference Read Counts for INDELs in tallyreads()","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"bamSliceR function fixIndelRefCounts() pileup total read depth INDELs.","code":"indels = subset(tallied_reads_vrinfo_baminfo_annotated_gr,                  bamSliceR:::getVarType(tallied_reads_vrinfo_baminfo_annotated_gr) != \"SNP\") summary(indels$VAF) summary(indels$refDepth)"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"visualization","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Visualization","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"facilitate downstream analysis variants patients, bamSliceR provides customized plotVAF() function based maftools::plotVaF() maftools help user investigate Variant Allele Frequency selected variants.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"distribution-of-vaf","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Distribution of VAF","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"default, plotVAF plot distribution VAF top genes.  specifying single gene multiple coordinates gene products, plotVAF() plot distribution VAF selected loci gene.  specifying multiple genes single coordinate genes’ products, plotVAF() plot distribution VAF selected loci gene.","code":"library(bamSliceR)  TARGET_AML_RNA_annotated_file = system.file(\"extdata\", \"TARGET_AML_RNA_annotated.gr.rds\",                              package = \"bamSliceR\")  tallied_reads_vrinfo_baminfo_annotated_gr = readRDS(TARGET_AML_RNA_annotated_file) plotVAF(tallied_reads_vrinfo_baminfo_annotated_gr, title = \"Default: VAF of Top genes\") plotVAF(tallied_reads_vrinfo_baminfo_annotated_gr, genes = \"IDH2\",          bySingleLocus = c(140, 172), title = \"VAF of IDH2 at R140 and R172\") histone_genes <- c(   HIST1H3A = \"H3C1\",   HIST1H3B = \"H3C2\",   HIST1H3C = \"H3C3\",   HIST1H3D = \"H3C4\",   HIST1H3E = \"H3C6\",   HIST1H3F = \"H3C7\",   HIST1H3G = \"H3C8\",   HIST1H3H = \"H3C10\",   HIST1H3I = \"H3C11\",   HIST1H3J = \"H3C12\", H3F3A = \"H3-3A\" )  plotVAF (tallied_reads_vrinfo_baminfo_annotated_gr,           genes = histone_genes,           bySingleLocus = c(28), title = \"VAF of Histone 3 genes at K27\")"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"covert-to-maf-file-format","dir":"Articles","previous_headings":"Working with Genomic BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Covert to MAF file format","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Also, bamSliceR provides utility allow conversion GRanges MAF format file, compatible maftools. Oncoplots, survival analysis, mutual exclusive test, etc, can implemented easily. details .","code":""},{"path":[]},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"why-transcriptome-bam","dir":"Articles","previous_headings":"Working with Transcriptome BAM files","what":"Why Transcriptome BAM ?","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Understanding transcript architecture genes crucial annotating variants determined raw read counts RNA-sequencing data. Overlooking biasing transcript-specific context may lead misinterpretation disease-associated effects variants. implemented bamSliceR facilitate transcript-aware variants annotation using transcriptome BAM generated aligning reads RNA-seq reference transcripts sequences (GENCODE v36)[https://www.gencodegenes.org/human/release_36.html].","code":"library(rtracklayer) library(bamSliceR)  leu.file = system.file(\"extdata\", \"leucegene.txs.tallied.reads.rds\", package = \"bamSliceR\") leu.tallied.reads = readRDS(leu.file) leu.tallied.reads[,c(\"UPC_ID\")] %>% head() ## VRanges object with 6 ranges and 1 metadata column: ##                seqnames    ranges strand         ref              alt     totalDepth ##                   <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1] ENST00000366816.5   536-537      *          CA                C              4 ##   [2] ENST00000366816.5       578      *           C               CT             20 ##   [3] ENST00000366816.5       654      *           C               CT             11 ##   [4] ENST00000366816.5       774      *           A                G            377 ##   [5] ENST00000366814.3        20      *           A                C            118 ##   [6] ENST00000366814.3        97      *           G            GGGTA             13 ##             refDepth       altDepth            sampleNames softFilterMatrix |      UPC_ID ##       <integerOrRle> <integerOrRle>          <factorOrRle>         <matrix> | <character> ##   [1]              0              4 02H053.RNAseq.gencod..                  |      02H053 ##   [2]              0             20 02H053.RNAseq.gencod..                  |      02H053 ##   [3]              0             11 02H053.RNAseq.gencod..                  |      02H053 ##   [4]            355             19 02H053.RNAseq.gencod..                  |      02H053 ##   [5]            112              6 02H053.RNAseq.gencod..                  |      02H053 ##   [6]              0             13 02H053.RNAseq.gencod..                  |      02H053 ##   ------- ##   seqinfo: 128 sequences from gencode.v36.txs genome ##   hardFilters: NULL"},{"path":[]},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"generate-trancriptomic-gencode-annotation-gff-file","dir":"Articles","previous_headings":"Working with Transcriptome BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Generate Trancriptomic GENCODE annotation GFF file","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Transcriptome BAM files lack information genomic coordinates mapping reads reference transcripts sequences. Convention GFF3 files, GENCODE example, contains gene annotation reference chromosomes, compatible Transcriptome BAM. order easily annotate tallied variants transcriptome BAM, provide get_txs_coords_of_gff() calculate coordinates transcripts features entity (except “gene” feature), based given genomic coordinates. function maintain internal structure GFF3 file (example, hierarchy features genes.)","code":"library(rtracklayer) library(bamSliceR) coords.column.names = c(\"seqid\", \"type\", \"start\", \"end\", \"gene_name\")  gencode.v36.file = system.file(\"extdata\", \"gencode.v36.annotation.subset.gff3\",                               package = \"bamSliceR\") gencode.v36.df = readGFF(gencode.v36.file) gencode.v36.df[,coords.column.names] ## DataFrame with 2403 rows and 5 columns ##         seqid       type     start       end   gene_name ##      <factor>   <factor> <integer> <integer> <character> ## 1        chr1 gene       226061851 226072019       H3-3A ## 2        chr1 transcript 226061851 226071523       H3-3A ## 3        chr1 exon       226061851 226062094       H3-3A ## 4        chr1 exon       226062735 226062811       H3-3A ## 5        chr1 exon       226064329 226064479       H3-3A ## ...       ...        ...       ...       ...         ... ## 2399    chr21 transcript  35954660  35984749       RUNX1 ## 2400    chr21 exon        35984572  35984749       RUNX1 ## 2401    chr21 exon        35981751  35981916       RUNX1 ## 2402    chr21 exon        35970075  35970167       RUNX1 ## 2403    chr21 exon        35954660  35954825       RUNX1 genomic.column.names = c(\"g_seqid\", \"g_start\", \"g_end\") get_txs_coords_of_gff( gencode.file = gencode.v36.file, isSaveGenomicCoords = TRUE) -> gencode.v36.transcripts.df ## [1] \"Get index of all feature types in GFF file...\" ## [1] \"Get the info of each features...\" ## [1] \"Get the coordinates aginst transcripts...\" ## [1] \"Swap genomic coordinates with transcripts coordiantes...\" gencode.v36.transcripts.df[,c(coords.column.names, genomic.column.names)] ## DataFrame with 2403 rows and 8 columns ##                  seqid       type     start       end   gene_name  g_seqid   g_start ##            <character>   <factor> <numeric> <numeric> <character> <factor> <integer> ## 1                 chr1 gene       226061851 226072019       H3-3A     chr1 226061851 ## 2    ENST00000366816.5 transcript         1       799       H3-3A     chr1 226061851 ## 3    ENST00000366816.5 exon               1       244       H3-3A     chr1 226061851 ## 4    ENST00000366816.5 exon             245       321       H3-3A     chr1 226062735 ## 5    ENST00000366816.5 exon             322       472       H3-3A     chr1 226064329 ## ...                ...        ...       ...       ...         ...      ...       ... ## 2399 ENST00000460207.1 transcript         1       603       RUNX1    chr21  35954660 ## 2400 ENST00000460207.1 exon               1       178       RUNX1    chr21  35984572 ## 2401 ENST00000460207.1 exon             179       344       RUNX1    chr21  35981751 ## 2402 ENST00000460207.1 exon             345       437       RUNX1    chr21  35970075 ## 2403 ENST00000460207.1 exon             438       603       RUNX1    chr21  35954660 ##          g_end ##      <integer> ## 1    226072019 ## 2    226071523 ## 3    226062094 ## 4    226062811 ## 5    226064479 ## ...        ... ## 2399  35984749 ## 2400  35984749 ## 2401  35981916 ## 2402  35970167 ## 2403  35954825"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"find-all-transcripts-of-gene-compatible-with-a-variant","dir":"Articles","previous_headings":"Working with Transcriptome BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Find all Transcripts of Gene Compatible with a Variant","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Transcripts overlap variant reads mapped may recorded filtered . However, cases still informative addressing questions mutated transcripts expressed, whether mutation triggers mechanisms like nonsense-mediated decay eliminate mutated transcripts. case, want re-tally reads transcripts compatible variant. genes, bamSliceR function getDisjoinOverlapBins create disjoint bins bin contains information transcriptome genomic coordinates overlapped transcripts. fixMissingTxs() call getDisjoinOverlapBins() find transcripts compatible variant.","code":"gencode.v36.txs.file = system.file(\"extdata\", \"gencode.v36.txs.annotation.subset.gff3\",                               package = \"bamSliceR\") getDisjoinOverlapBins(gencode.file.txs = gencode.v36.txs.file) -> gencode.v36.txs.bins  split(gencode.v36.txs.bins$transcript_id, gencode.v36.txs.bins$bin_tag)[1:10] ## $`chr1:226061851-226062094` ## [1] \"ENST00000366816.5\" ##  ## $`chr1:226062714-226062715` ## [1] \"ENST00000366814.3\" ##  ## $`chr1:226062716-226062725` ## [1] \"ENST00000366814.3\"  \"ENST00000366815.10\" ##  ## $`chr1:226062726-226062734` ## [1] \"ENST00000366814.3\"  \"ENST00000366815.10\" \"ENST00000653960.1\"  ##  ## $`chr1:226062735-226062749` ## [1] \"ENST00000366816.5\"  \"ENST00000366814.3\"  \"ENST00000366815.10\" \"ENST00000653960.1\"  ##  ## $`chr1:226062750-226062757` ## [1] \"ENST00000366816.5\"  \"ENST00000366814.3\"  \"ENST00000366815.10\" \"ENST00000653960.1\"  ## [5] \"ENST00000655399.1\"  ##  ## $`chr1:226062758-226062782` ## [1] \"ENST00000366816.5\"  \"ENST00000366814.3\"  \"ENST00000366815.10\" \"ENST00000653960.1\"  ## [5] \"ENST00000655399.1\"  \"ENST00000667897.1\"  ##  ## $`chr1:226062783-226062811` ## [1] \"ENST00000366816.5\"  \"ENST00000366814.3\"  \"ENST00000366815.10\" \"ENST00000653960.1\"  ## [5] \"ENST00000655399.1\"  \"ENST00000667897.1\"  \"ENST00000656829.1\"  ##  ## $`chr1:226062812-226062948` ## [1] \"ENST00000655399.1\" ##  ## $`chr1:226063466-226063493` ## [1] \"ENST00000666609.1\" oneTxsVariant_file = system.file(\"extdata\", \"oneTxsVariant.rds\",                               package = \"bamSliceR\") bam.file.dir = system.file(\"extdata\", package = \"bamSliceR\") oneTxsVariant = readRDS(oneTxsVariant_file) oneTxsVariant[,c(\"UPC_ID\", \"VAF\")] ## VRanges object with 1 range and 2 metadata columns: ##                seqnames    ranges strand         ref              alt     totalDepth ##                   <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1] ENST00000343638.9      2590      *           C                T             72 ##             refDepth       altDepth            sampleNames softFilterMatrix |      UPC_ID ##       <integerOrRle> <integerOrRle>          <factorOrRle>         <matrix> | <character> ##   [1]             63              8 04H138.RNAseq.gencod..                  |      04H138 ##             VAF ##       <numeric> ##   [1]  0.111111 ##   ------- ##   seqinfo: 232117 sequences from gencode.v36.txs genome ##   hardFilters: NULL all_compatible_txs = fixMissingTxs(oneTxsVariant,                                     gencode.file.txs = gencode.v36.txs.file,                                     bam.file.dir = bam.file.dir) all_compatible_txs[,c(\"UPC_ID\", \"VAF\")] ## VRanges object with 6 ranges and 2 metadata columns: ##                seqnames    ranges strand         ref              alt     totalDepth ##                   <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##   [1] ENST00000343638.9      2590      *           C                T             72 ##   [2] ENST00000302904.8      2903      *           C                T             56 ##   [3] ENST00000436088.6      2708      *           C                T             71 ##   [4] ENST00000527034.5      2477      *           C                T             64 ##   [5] ENST00000533177.5      2479      *           C                T             48 ##   [6] ENST00000393606.7      2672      *           C                T              0 ##             refDepth       altDepth                                   sampleNames ##       <integerOrRle> <integerOrRle>                                 <factorOrRle> ##   [1]             63              8 04H138.RNAseq.gencode.v36.minimap2.sorted.bam ##   [2]             56              0 04H138.RNAseq.gencode.v36.minimap2.sorted.bam ##   [3]             71              0 04H138.RNAseq.gencode.v36.minimap2.sorted.bam ##   [4]             64              0 04H138.RNAseq.gencode.v36.minimap2.sorted.bam ##   [5]             48              0 04H138.RNAseq.gencode.v36.minimap2.sorted.bam ##   [6]              0              0 04H138.RNAseq.gencode.v36.minimap2.sorted.bam ##       softFilterMatrix |      UPC_ID       VAF ##               <matrix> | <character> <numeric> ##   [1]                  |      04H138  0.111111 ##   [2]                  |      04H138  0.000000 ##   [3]                  |      04H138  0.000000 ##   [4]                  |      04H138  0.000000 ##   [5]                  |      04H138  0.000000 ##   [6]                  |      04H138  0.000000 ##   ------- ##   seqinfo: 232117 sequences from gencode.v36.txs genome ##   hardFilters: NULL"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"annotation-of-variants-1","dir":"Articles","previous_headings":"Working with Transcriptome BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Annotation of Variants","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"bamSliceR provide wrapper function getVariantAnnotationForTxs() annotate Variants : making customized TxDb object given gencode.gff3 file calling getVariantAnnotation.Txs() & getGenCodeAnnotation.Txs() merging annotation results two sources.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"predict-consequence-of-variants","dir":"Articles","previous_headings":"Working with Transcriptome BAM files > Annotation of Variants tallied from Genomic BAM files > Annotation of Variants","what":"Predict Consequence of Variants","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"Similar annotate variants genomic BAM files, use VariantAnnotation predict consequence variants getVariantAnnotation.Txs(). difference need: 1) Create txdb object GENCODE annotation file GFF3 format contains information genomic transcriptome coordinates. 2) Fasta file contains nucleotide sequences transcripts.","code":"# Create txdb object gencode.v36.txs.file = system.file(\"extdata\", \"gencode.v36.txs.annotation.subset.gff3\",                               package = \"bamSliceR\") gencode.gr <- import(gencode.v36.txs.file, format=\"gff3\") metadata = data.frame(name = c(\"Data source\", \"Organism\",\"Taxonomy ID\", \"miRBase build ID\"),                         value= c(\"GENCODE.v36\", \"Homo sapiens\", \"9606\", NA)) txdb <- suppressWarnings(makeTxDbFromGRanges(gencode.gr, metadata = metadata))  #getVariantAnnotation.Txs seqSource = system.file(\"extdata\", \"gencode.v36.transcripts.subset.fa\",                         package = \"bamSliceR\") leu.tallied.reads.annotated = getVariantAnnotation.Txs(leu.tallied.reads,                                                         txdb = txdb,                                                         seqSource = seqSource) leu.tallied.reads.annotated[3435:3438,c(\"UPC_ID\",bamSliceR:::.VARIANT_ANNOTATE_INFO[1:14])] ## GRanges object with 4 ranges and 15 metadata columns: ##                seqnames    ranges strand |      UPC_ID      varAllele    CDSLOC ##                   <Rle> <IRanges>  <Rle> | <character> <DNAStringSet> <IRanges> ##   [1] ENST00000527034.5      1217      - |      05H195              T      1204 ##   [2] ENST00000527034.5      1233      - |      05H195              G      1188 ##   [3] ENST00000527034.5      1335      - |      05H195              T      1086 ##   [4] ENST00000533177.5       486      - |      05H195             TG      1879 ##          PROTEINLOC   QUERYID        TXID         CDSID             GENEID   CONSEQUENCE ##       <IntegerList> <integer> <character> <IntegerList>        <character>      <factor> ##   [1]           402     15300          79           488 ENSG00000108312.15 nonsynonymous ##   [2]           396     15301          79           488 ENSG00000108312.15 synonymous    ##   [3]           362     15302          79           489 ENSG00000108312.15 synonymous    ##   [4]           627     15312          86           531 ENSG00000108312.15 frameshift    ##             REFCODON       VARCODON         REFAA         VARAA       POS      CHANGE ##       <DNAStringSet> <DNAStringSet> <AAStringSet> <AAStringSet> <integer> <character> ##   [1]            GAT            TAT             D             Y       402       D402Y ##   [2]            GGT            GGG             G             G       396       G396G ##   [3]            CCG            CCT             P             P       362       P362P ##   [4]            GCC           TGCC                                   627         627 ##   ------- ##   seqinfo: 128 sequences from gencode.v36.txs genome"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"mapping-locus-with-features-of-variants-","dir":"Articles","previous_headings":"Working with Transcriptome BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Mapping locus with features of Variants.","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"getGenCodeAnnotation.Txs() map locus features variants also GENCODE annotation file GFF3 format contains information genomic transcriptome coordinates. function focus CDS regions, also UTR/STOP/START regions. , match transcriptome coordinates locus genomic coordinates.","code":"leu.tallied.reads.gencode = getGenCodeAnnotation.Txs(leu.tallied.reads,                                                       gencode.file.txs = gencode.v36.txs.file) leu.tallied.reads.gencode[,c(\"UPC_ID\",bamSliceR:::.GRvsTXS_INFO )] ## VRanges object with 53971 ranges and 11 metadata columns: ##                    seqnames    ranges strand         ref              alt     totalDepth ##                       <Rle> <IRanges>  <Rle> <character> <characterOrRle> <integerOrRle> ##       [1] ENST00000366816.5   536-537      *          CA                C              4 ##       [2] ENST00000366816.5       578      *           C               CT             20 ##       [3] ENST00000366816.5       654      *           C               CT             11 ##       [4] ENST00000366816.5       774      *           A                G            377 ##       [5] ENST00000366814.3        20      *           A                C            118 ##       ...               ...       ...    ...         ...              ...            ... ##   [53967] ENST00000358356.9       176      *           G               GT              6 ##   [53968] ENST00000358356.9      1433      *           A                C             22 ##   [53969] ENST00000358356.9      1439      *           G               GC              5 ##   [53970] ENST00000358356.9      1449      *           A                C             20 ##   [53971] ENST00000358356.9      1517      *           G                A             15 ##                 refDepth       altDepth            sampleNames softFilterMatrix | ##           <integerOrRle> <integerOrRle>          <factorOrRle>         <matrix> | ##       [1]              0              4 02H053.RNAseq.gencod..                  | ##       [2]              0             20 02H053.RNAseq.gencod..                  | ##       [3]              0             11 02H053.RNAseq.gencod..                  | ##       [4]            355             19 02H053.RNAseq.gencod..                  | ##       [5]            112              6 02H053.RNAseq.gencod..                  | ##       ...            ...            ...                    ...              ... . ##   [53967]              0              6 14H071.RNAseq.gencod..                  | ##   [53968]             15              4 14H071.RNAseq.gencod..                  | ##   [53969]              0              5 14H071.RNAseq.gencod..                  | ##   [53970]             16              4 14H071.RNAseq.gencod..                  | ##   [53971]              8              7 14H071.RNAseq.gencod..                  | ##                UPC_ID g_exon_number         g_exon_id     g_seqid   g_start     g_end ##           <character>   <character>       <character> <character> <integer> <integer> ##       [1]      02H053             4 ENSE00002355903.1        chr1 226065719 226065720 ##       [2]      02H053             4 ENSE00002355903.1        chr1 226065761 226065761 ##       [3]      02H053             5 ENSE00001381318.2        chr1 226071378 226071378 ##       [4]      02H053             5 ENSE00001381318.2        chr1 226071498 226071498 ##       [5]      02H053             1 ENSE00001442673.3        chr1 226062733 226062733 ##       ...         ...           ...               ...         ...       ...       ... ##   [53967]      14H071             1 ENSE00001380483.1       chr21  34888515  34888515 ##   [53968]      14H071             1 ENSE00001380483.1       chr21  34887258  34887258 ##   [53969]      14H071             1 ENSE00001380483.1       chr21  34887252  34887252 ##   [53970]      14H071             1 ENSE00001380483.1       chr21  34887242  34887242 ##   [53971]      14H071             1 ENSE00001380483.1       chr21  34887174  34887174 ##              g_strand         g_isCDS     g_isSSC   gene_name            gene_id ##           <character>     <character> <character> <character>        <character> ##       [1]           +             CDS        <NA>       H3-3A ENSG00000163041.13 ##       [2]           +             CDS        <NA>       H3-3A ENSG00000163041.13 ##       [3]           +             CDS        <NA>       H3-3A ENSG00000163041.13 ##       [4]           + three_prime_UTR        <NA>       H3-3A ENSG00000163041.13 ##       [5]           +  five_prime_UTR        <NA>       H3-3A ENSG00000163041.13 ##       ...         ...             ...         ...         ...                ... ##   [53967]           -  five_prime_UTR        <NA>       RUNX1 ENSG00000159216.19 ##   [53968]           -  five_prime_UTR        <NA>       RUNX1 ENSG00000159216.19 ##   [53969]           -  five_prime_UTR        <NA>       RUNX1 ENSG00000159216.19 ##   [53970]           -  five_prime_UTR        <NA>       RUNX1 ENSG00000159216.19 ##   [53971]           -  five_prime_UTR        <NA>       RUNX1 ENSG00000159216.19 ##   ------- ##   seqinfo: 128 sequences from gencode.v36.txs genome ##   hardFilters: NULL"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"merge-annotation-results-from-two-sources","dir":"Articles","previous_headings":"Working with Transcriptome BAM files > Annotation of Variants tallied from Genomic BAM files","what":"Merge annotation results from two sources","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"practice, getVariantAnnotationForTxs() can used retrieve annotation results sources.","code":"leu.tallied.reads.annoted = getVariantAnnotationForTxs(gencode.file.txs = gencode.v36.txs.file,                                                         seqSource = seqSource,                                                        query.ranges = leu.tallied.reads) head(leu.tallied.reads.annoted) ## GRanges object with 6 ranges and 37 metadata columns: ##                seqnames    ranges strand |         ref         alt totalDepth  refDepth ##                   <Rle> <IRanges>  <Rle> | <character> <character>  <integer> <integer> ##   [1] ENST00000366816.5   536-537      * |          CA           C          4         0 ##   [2] ENST00000366816.5       578      * |           C          CT         20         0 ##   [3] ENST00000366816.5       654      * |           C          CT         11         0 ##   [4] ENST00000366816.5       774      * |           A           G        377       355 ##   [5] ENST00000366814.3        20      * |           A           C        118       112 ##   [6] ENST00000366814.3        97      * |           G       GGGTA         13         0 ##        altDepth       VAF      sample              file_name     case_id ##       <integer> <numeric> <character>            <character> <character> ##   [1]         4 1.0000000      02H053 02H053.RNAseq.gencod..      02H053 ##   [2]        20 1.0000000      02H053 02H053.RNAseq.gencod..      02H053 ##   [3]        11 1.0000000      02H053 02H053.RNAseq.gencod..      02H053 ##   [4]        19 0.0503979      02H053 02H053.RNAseq.gencod..      02H053 ##   [5]         6 0.0508475      02H053 02H053.RNAseq.gencod..      02H053 ##   [6]        13 1.0000000      02H053 02H053.RNAseq.gencod..      02H053 ##                 sample_type  experimental_strategy   downloaded_file_name      UPC_ID ##                 <character>            <character>            <character> <character> ##   [1] Bone marrow_Diagnosis RNA-Seq STAR 2-Pass .. 02H053.RNAseq.gencod..      02H053 ##   [2] Bone marrow_Diagnosis RNA-Seq STAR 2-Pass .. 02H053.RNAseq.gencod..      02H053 ##   [3] Bone marrow_Diagnosis RNA-Seq STAR 2-Pass .. 02H053.RNAseq.gencod..      02H053 ##   [4] Bone marrow_Diagnosis RNA-Seq STAR 2-Pass .. 02H053.RNAseq.gencod..      02H053 ##   [5] Bone marrow_Diagnosis RNA-Seq STAR 2-Pass .. 02H053.RNAseq.gencod..      02H053 ##   [6] Bone marrow_Diagnosis RNA-Seq STAR 2-Pass .. 02H053.RNAseq.gencod..      02H053 ##            varAllele    CDSLOC    PROTEINLOC   QUERYID        TXID         CDSID ##       <DNAStringSet> <IRanges> <IntegerList> <integer> <character> <IntegerList> ##   [1]              C   192-193         64,65         1          22           212 ##   [2]             CT       234            78         2          22           212 ##   [3]             CT       310           104         3          22           213 ##   [4]              N        -1          <NA>      <NA>        <NA>          <NA> ##   [5]              N        -1          <NA>      <NA>        <NA>          <NA> ##   [6]              N        -1          <NA>      <NA>        <NA>          <NA> ##                   GENEID CONSEQUENCE       REFCODON       VARCODON         REFAA ##              <character> <character> <DNAStringSet> <DNAStringSet> <AAStringSet> ##   [1] ENSG00000163041.13  frameshift         CGCAAA          CGCAA               ##   [2] ENSG00000163041.13  frameshift            GAC           GACT               ##   [3] ENSG00000163041.13  frameshift            CTT           CTTT               ##   [4] ENSG00000163041.13        <NA>              N              N             N ##   [5] ENSG00000163041.13        <NA>              N              N             N ##   [6] ENSG00000163041.13        <NA>              N              N             N ##               VARAA       POS      CHANGE      SYMBOL       HGVSP g_exon_number ##       <AAStringSet> <integer> <character> <character> <character>   <character> ##   [1]                      64          64       H3-3A     H3-3A64             4 ##   [2]                      78          78       H3-3A     H3-3A78             4 ##   [3]                     104         104       H3-3A    H3-3A104             5 ##   [4]             N      <NA>        <NA>       H3-3A        <NA>             5 ##   [5]             N      <NA>        <NA>       H3-3A        <NA>             1 ##   [6]             N      <NA>        <NA>       H3-3A        <NA>             1 ##               g_exon_id     g_seqid   g_start     g_end    g_strand         g_isCDS ##             <character> <character> <integer> <integer> <character>     <character> ##   [1] ENSE00002355903.1        chr1 226065719 226065720           +             CDS ##   [2] ENSE00002355903.1        chr1 226065761 226065761           +             CDS ##   [3] ENSE00001381318.2        chr1 226071378 226071378           +             CDS ##   [4] ENSE00001381318.2        chr1 226071498 226071498           + three_prime_UTR ##   [5] ENSE00001442673.3        chr1 226062733 226062733           +  five_prime_UTR ##   [6] ENSE00001442673.3        chr1 226062810 226062810           +  five_prime_UTR ##           g_isSSC ##       <character> ##   [1]        <NA> ##   [2]        <NA> ##   [3]        <NA> ##   [4]        <NA> ##   [5]        <NA> ##   [6]        <NA> ##   ------- ##   seqinfo: 128 sequences from gencode.v36.txs genome"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"using-genomic-vaf-as-prior-to-infer-transcripts-vaf","dir":"Articles","previous_headings":"","what":"Using Genomic VAF as Prior to Infer Transcripts’ VAF","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"now Genomic Transcriptome annotation variants. Specifically, know ref alt read counts VAF genomic alignment mapped reads linear reference genome. also information transcripts gene mapping reads transcripts’ sequences. Now, question can infer transcript carried variants expressed based reads mapping evidence. Rather pretending evidence equal weight, instead can test null compatible transcript VAF generated underlying distribution sampled genomic VAF variant (g_VAF) total_depth trials. prior Pr(variant transcript X) == Pr(variant gDNA), g_VAF follows Beta distribution Beta(g_depth_ref, g_depth_alt). tVAF≈gVAF∼Beta(gdepth_alt,gdepth_ref) t_{\\text{VAF}} \\approx g_{\\text{VAF}} \\sim \\text{Beta}(g_{\\text{depth_alt}}, g_{\\text{depth_ref}}) tdepth_alt∼Binom(tdepth_total,gVAF) t_{\\text{depth_alt}} \\sim \\text{Binom}(t_{\\text{depth_total}}, g_{\\text{VAF}}) example:  can Bayesian model comparison calculate Bayes factor two models: model 1: Pr(V|Tx TxCanHarborV) == Pr(V) Tx TxCanHarborV (prior Pr(V) Pr(V|gDNA)) model 2: Pr(V|Tx TxCanHarborV) != Pr(V) Tx TxCanHarborV (prior ) Example integrating parameter space possible evidence:","code":"#contains all recurrent variants that compatible with more than one transcripts gVSt_file = system.file(\"extdata\", \"GvsT_recurrent_multiTxs_list.rds\",                               package = \"bamSliceR\") GvsT_recurrent_multiTxs_list = readRDS(gVSt_file)  #one patient one variant demo = GvsT_recurrent_multiTxs_list[[16]][1:4,] demo ## DataFrame with 4 rows and 32 columns ##       g_seqid   g_start     g_end   strand    g_UPC_ID       g_ref       g_alt ##   <character> <integer> <integer> <factor> <character> <character> <character> ## 1       chr15  90085321  90085321        *      02H060           T           C ## 2       chr15  90085321  90085321        *      02H060           T           C ## 3       chr15  90085321  90085321        *      02H060           T           C ## 4       chr15  90085321  90085321        *      02H060           T           C ##   g_totalDepth g_refDepth g_altDepth     g_VAF    t_gseqid  t_gstart    t_gend ##      <numeric>  <numeric>  <integer> <numeric> <character> <integer> <integer> ## 1         1013        911         98 0.0967423       chr15  90085321  90085321 ## 2         1013        911         98 0.0967423       chr15  90085321  90085321 ## 3         1013        911         98 0.0967423       chr15  90085321  90085321 ## 4         1013        911         98 0.0967423       chr15  90085321  90085321 ##      t_UPC_ID       t_ref       t_alt t_totalDepth t_refDepth t_altDepth     t_VAF ##   <character> <character> <character>    <numeric>  <numeric>  <integer> <numeric> ## 1      02H060           T           C          258        248         10 0.0387597 ## 2      02H060           T           C          228        212         16 0.0701754 ## 3      02H060           T           C          221        209         11 0.0497738 ## 4      02H060           T           C          223        204         19 0.0852018 ##            t_tseqid  t_tstart    t_tend      SYMBOL      CHANGE     g_len     t_len ##         <character> <integer> <integer> <character> <character> <integer> <integer> ## 1 ENST00000330062.8      1112      1112        IDH2       E345G         1         1 ## 2 ENST00000560061.1       854       854        IDH2          NA         1         1 ## 3 ENST00000559482.5       794       794        IDH2       E236G         1         1 ## 4 ENST00000540499.2      1039      1039        IDH2       E293G         1         1 ##   min_start   max_end      DNAstring            variant_tag ##   <integer> <integer> <DNAStringSet>            <character> ## 1  90085321  90085321              T chr15:90085321:90085.. ## 2  90085321  90085321              T chr15:90085321:90085.. ## 3  90085321  90085321              T chr15:90085321:90085.. ## 4  90085321  90085321              T chr15:90085321:90085.. plotHistAsDist = function(data, binwidth = 0.001, i) {   data = data.frame(d = 1:nrow(data), average = data[,i])   ggplot(data, aes(x = average)) +     geom_histogram(binwidth = binwidth, fill = \"blue\", color = \"black\", alpha = 0.7) +     labs(title = \"Distribution of True Averages\",          x = \"True Average\",          y = \"Frequency\") +     theme_minimal() }  #Example:V = \"chr15:90085321:90085321:T:C\" patient:\"02H060\" #g_VAF = 0.0967423 #g_altDepth = 98 #g_refDepth = 911 #EC:\"ENST00000330062.8\", \"ENST00000560061.1\", \"ENST00000559482.5\", \"ENST00000540499.2\"  #model 1: VAF(ENST00000330062.8) == g_VAF(V) #t_totalDepth(ENST00000330062.8) == 258 #t_altDepth(ENST00000330062.8) == 10 #t_refDepth(ENST00000330062.8) == 248 #1) assume that in model 1 the prior distribution for theta(VAF) # is Beta(g_altDepth, g_refDepth) == Beta(98, 911)  # The observed data for \"ENST00000330062.8\" tells us that there # are 258 \"bernoulli trails\"(txs total depth), and 10 \"success\" (txs alt depth).  #Use simulation to approximate the probability of observing 10 \"success\"  #in 258 \"bernoulli trails\" given that model 1 is correct.  Nrep = 1000000 g_VAF = rbeta(Nrep, 98, 911) theta_df = data.frame(theta = g_VAF, no = 1:length(g_VAF)) plotHistAsDist(theta_df,                 binwidth = 0.001,                 i = which(colnames(theta_df) == \"theta\")) y = rbinom(Nrep, 258, g_VAF) sum(y == 10) / Nrep ## [1] 0.000636 ## Approximation of integrate over the parameter space for the possible evidence theta = seq(0,1,0.00001) #p(theta|M) = p(g_VAF|beta dist)  prior_of_theta = dbeta(theta, 98, 911)  #likelihood p(X | theta) == p(alt_txs_reads | g_VAF) likelihood = dbinom(10 , 258, theta)  # integral of p(X| theta, M) * p(theta | M) dtheta mg_txs1 = sum(likelihood * prior_of_theta * theta)"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html","id":"extract-reads-from-bam-files-for-variants","dir":"Articles","previous_headings":"Using Genomic VAF as Prior to Infer Transcripts’ VAF","what":"Extract reads from BAM files for variants","title":"Slicing and Tallied BAMs for Interested Genes and Variant Analysis","text":"given transcript, universe reads supporting may may overlap others. degree case determines correlated () results tests expected . bamSliceR provide function extractBasesAtPosition() collect read names support either reference alternative alleles transcripts.","code":"## Approximation of integrate over the parameter space for the possible evidence theta = seq(0,1,0.00001) #p(theta|M) = p(g_VAF|beta dist)  prior_of_theta = dbeta(theta, 98, 911)  #likelihood p(X | theta) == p(alt_txs_reads | g_VAF) likelihood = dbinom(10 , 258, theta)  # integral of p(X| theta, M) * p(theta | M) dtheta mg_txs1 = sum(likelihood * prior_of_theta * theta) #one patient one variant demo[1,c(\"t_totalDepth\", \"t_refDepth\", \"t_altDepth\", \"t_VAF\", \"t_tseqid\", \"SYMBOL\", \"CHANGE\")] ## DataFrame with 1 row and 7 columns ##   t_totalDepth t_refDepth t_altDepth     t_VAF          t_tseqid      SYMBOL      CHANGE ##      <numeric>  <numeric>  <integer> <numeric>       <character> <character> <character> ## 1          258        248         10 0.0387597 ENST00000330062.8        IDH2       E345G genomicPosition = GRanges(seqnames = demo$t_tseqid[1],                            ranges = IRanges(start = demo$t_tstart[1], end = demo$t_tend[1]) ) bamFile = system.file(\"extdata\",\"02H060.RNAseq.gencode.v36.minimap2.sorted.bam\",                               package = \"bamSliceR\") readsPerTxs = extractBasesAtPosition(bamFile = bamFile, which = genomicPosition)  table(readsPerTxs[[1]]) ##  ##   A   G   N  ## 248  10  19 sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        ##  [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C               ## [10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] parallel  stats4    stats     graphics  grDevices utils     datasets  methods   ## [9] base      ##  ## other attached packages: ##  [1] Homo.sapiens_1.3.1                      TxDb.Hsapiens.UCSC.hg19.knownGene_3.2.2 ##  [3] org.Hs.eg.db_3.19.1                     GO.db_3.19.1                            ##  [5] OrganismDbi_1.47.0                      GenomicFeatures_1.57.0                  ##  [7] AnnotationDbi_1.67.0                    ggplot2_3.5.1                           ##  [9] rtracklayer_1.65.0                      bamSliceR_0.1.2                         ## [11] GenomicDataCommons_1.29.3               plyranges_1.25.0                        ## [13] VariantAnnotation_1.51.0                SummarizedExperiment_1.35.1             ## [15] Biobase_2.65.0                          MatrixGenerics_1.17.0                   ## [17] matrixStats_1.3.0                       gmapR_1.47.0                            ## [19] Rsamtools_2.21.0                        Biostrings_2.73.1                       ## [21] XVector_0.45.0                          GenomicRanges_1.57.1                    ## [23] GenomeInfoDb_1.41.1                     IRanges_2.39.2                          ## [25] S4Vectors_0.43.2                        BiocGenerics_0.51.0                     ##  ## loaded via a namespace (and not attached): ##   [1] RColorBrewer_1.1-3                       jsonlite_1.8.8                           ##   [3] magrittr_2.0.3                           farver_2.1.2                             ##   [5] rmarkdown_2.27                           fs_1.6.4                                 ##   [7] BiocIO_1.15.0                            zlibbioc_1.51.1                          ##   [9] ragg_1.3.2                               vctrs_0.6.5                              ##  [11] memoise_2.0.1                            RCurl_1.98-1.16                          ##  [13] htmltools_0.5.8.1                        S4Arrays_1.5.5                           ##  [15] progress_1.2.3                           curl_5.2.1                               ##  [17] SparseArray_1.5.25                       sass_0.4.9                               ##  [19] bslib_0.7.0                              htmlwidgets_1.6.4                        ##  [21] desc_1.4.3                               httr2_1.0.2                              ##  [23] cachem_1.1.0                             GenomicAlignments_1.41.0                 ##  [25] lifecycle_1.0.4                          pkgconfig_2.0.3                          ##  [27] Matrix_1.7-0                             R6_2.5.1                                 ##  [29] fastmap_1.2.0                            GenomeInfoDbData_1.2.12                  ##  [31] digest_0.6.36                            colorspace_2.1-0                         ##  [33] maftools_2.21.0                          textshaping_0.4.0                        ##  [35] RSQLite_2.3.7                            labeling_0.4.3                           ##  [37] filelock_1.0.3                           fansi_1.0.6                              ##  [39] httr_1.4.7                               abind_1.4-5                              ##  [41] compiler_4.4.1                           bit64_4.0.5                              ##  [43] withr_3.0.0                              BiocParallel_1.39.0                      ##  [45] DBI_1.2.3                                highr_0.11                               ##  [47] biomaRt_2.61.2                           rappdirs_0.3.3                           ##  [49] DelayedArray_0.31.9                      rjson_0.2.21                             ##  [51] DNAcopy_1.79.0                           tools_4.4.1                              ##  [53] glue_1.7.0                               restfulr_0.0.15                          ##  [55] VariantTools_1.47.0                      grid_4.4.1                               ##  [57] generics_0.1.3                           gtable_0.3.5                             ##  [59] BSgenome_1.73.0                          tzdb_0.4.0                               ##  [61] data.table_1.15.4                        hms_1.1.3                                ##  [63] xml2_1.3.6                               utf8_1.2.4                               ##  [65] pillar_1.9.0                             stringr_1.5.1                            ##  [67] splines_4.4.1                            dplyr_1.1.4                              ##  [69] BiocFileCache_2.13.0                     lattice_0.22-6                           ##  [71] survival_3.7-0                           bit_4.0.5                                ##  [73] tidyselect_1.2.1                         BSgenome.Hsapiens.UCSC.hg38_1.4.5        ##  [75] RBGL_1.81.0                              knitr_1.48                               ##  [77] xfun_0.46                                stringi_1.8.4                            ##  [79] UCSC.utils_1.1.0                         yaml_2.3.9                               ##  [81] TxDb.Hsapiens.UCSC.hg38.knownGene_3.18.0 evaluate_0.24.0                          ##  [83] codetools_0.2-20                         tibble_3.2.1                             ##  [85] BiocManager_1.30.23                      graph_1.83.0                             ##  [87] cli_3.6.3                                systemfonts_1.1.0                        ##  [89] munsell_0.5.1                            jquerylib_0.1.4                          ##  [91] dbplyr_2.5.0                             png_0.1-8                                ##  [93] XML_3.99-0.17                            pkgdown_2.1.0                            ##  [95] readr_2.1.5                              blob_1.2.4                               ##  [97] prettyunits_1.2.0                        bitops_1.0-7                             ##  [99] txdbmaker_1.1.1                          scales_1.3.0                             ## [101] purrr_1.0.2                              crayon_1.5.3                             ## [103] rlang_1.1.4                              KEGGREST_1.45.1"},{"path":[]},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Huang. Author, maintainer.","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huang P (2024). bamSliceR.Bioc2024.Demo: Slicing Tallied BAMs Interested Genes Variant Analysis. R package version 2.0.1, https://huangyizR.github.io/bamSliceR-Bioc2024-Demo.","code":"@Manual{,   title = {bamSliceR.Bioc2024.Demo: Slicing and Tallied BAMs for Interested Genes and Variant Analysis},   author = {Peter Huang},   year = {2024},   note = {R package version 2.0.1},   url = {https://huangyizR.github.io/bamSliceR-Bioc2024-Demo}, }"},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/index.html","id":"bamslicer-slicing-and-tallied-bams-for-interested-genes-and-variant-analysis","dir":"","previous_headings":"","what":"bamSliceR package demo","title":"bamSliceR package demo","text":"rendered vignette available [Gethub pages] (https://huangyizr.github.io/bamSliceR-Bioc2024-Demo/articles/BamSliceR.Bioc2024.html)","code":""},{"path":"https://huangyizR.github.io/bamSliceR-Bioc2024-Demo/index.html","id":"docker-image","dir":"","previous_headings":"","what":"Docker image","title":"bamSliceR package demo","text":"pre-built docker image package associated data available ghcr.io/huangyizR/bamSliceR-Bioc2024-Demo:latest. run docker image, can use following command:","code":"docker run -e PASSWORD=<choose_a_password_for_rstudio> -p 8787:8787 ghcr.io/huangyizR/bamSliceR-Bioc2024-Demo:latest"}]
